@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject NavigationManager Navigation
@using MudBlazor.Utilities
@implements IDisposable

<div class="page">
    @* Required *@
    <MudThemeProvider Theme="_customTheme" />
    <MudPopoverProvider />

    @* Needed for dialogs *@
    <MudDialogProvider />

    @* Needed for snackbars *@
    <MudSnackbarProvider />
    
    <MudLayout>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Medium">
                @Body
            </MudContainer>
        </MudMainContent>
        
        @if (_isAuthenticated)
        {
            <NavMenu />
        }
    </MudLayout>
</div>

@code {
    private bool _isAuthenticated;

    private readonly MudTheme _customTheme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = new MudColor(252,163,17, 100), // #FCA311FF
            TextPrimary = new MudColor(255,255,255, 100),
            Background = new MudColor(20,33,61,100), // #14213D
        }
    };

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        Navigation.LocationChanged += OnLocationChanged;
        RedirectIfNeeded();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _ = InvokeAsync(async () =>
        {
            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            RedirectIfNeeded();
            StateHasChanged();
        });
    }

    private void RedirectIfNeeded()
    {
        if (!_isAuthenticated && !IsPublicRoute(Navigation.Uri))
        {
            Navigation.NavigateTo("/login");
        }
    }

    private bool IsPublicRoute(string uri)
    {
        var path = Navigation.ToBaseRelativePath(uri).Trim('/');
        if (string.IsNullOrEmpty(path)) return false;
        return path.StartsWith("login", StringComparison.OrdinalIgnoreCase)
               || path.StartsWith("register", StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}