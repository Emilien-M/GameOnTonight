@page "/login"
@using GameOnTonight.RestClient.Generated
@using GameOnTonight.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IGameOnTonightApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-info">
            Vous êtes déjà connecté. <a href="/">Aller à l'accueil</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>Connexion</h3>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                                <ValidationMessage For="@(() => loginModel.Email)" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Mot de passe</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Connexion...</span>
                                }
                                else
                                {
                                    <span>Se connecter</span>
                                }
                            </button>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                        
                        <div class="mt-3">
                            Pas encore de compte ? <a href="register">S'inscrire</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginQuery loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            // Effectuer la requête de connexion avec la méthode correcte
            var token = await ApiClient.LoginAsync(loginModel);
           
            await AuthService.LoginAsync(token.Token);
            NavigationManager.NavigateTo("/", true);
        }
        catch (ApiException ex)
        {
            errorMessage = $"Erreur lors de la connexion: {ex.StatusCode} - {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur inattendue s'est produite: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
