// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace GameOnTonight.AutoRest.Samples
{
    public partial class Samples_GameOnTonightClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AuthRegister_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
                confirmPassword = "<confirmPassword>",
            });
            Response response = client.AuthRegister(content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AuthRegister_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
                confirmPassword = "<confirmPassword>",
            });
            Response response = await client.AuthRegisterAsync(content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AuthRegister_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
                confirmPassword = "<confirmPassword>",
            });
            Response response = client.AuthRegister(content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AuthRegister_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
                confirmPassword = "<confirmPassword>",
            });
            Response response = await client.AuthRegisterAsync(content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AuthLogin_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
            });
            Response response = client.AuthLogin(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AuthLogin_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
            });
            Response response = await client.AuthLoginAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AuthLogin_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
            });
            Response response = client.AuthLogin(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AuthLogin_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                email = "<email>",
                password = "<password>",
            });
            Response response = await client.AuthLoginAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGet_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGet(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGet_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGet_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGet(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("minPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("maxPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("durationMinutes").ToString());
            Console.WriteLine(result[0].GetProperty("gameType").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("imageUrl").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGet_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("minPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("maxPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("durationMinutes").ToString());
            Console.WriteLine(result[0].GetProperty("gameType").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("imageUrl").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesPost_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
            });
            Response response = client.BoardGamesPost(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesPost_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
            });
            Response response = await client.BoardGamesPostAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesPost_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
                description = "<description>",
                imageUrl = "<imageUrl>",
            });
            Response response = client.BoardGamesPost(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesPost_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
                description = "<description>",
                imageUrl = "<imageUrl>",
            });
            Response response = await client.BoardGamesPostAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGetById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGetById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("minPlayers").ToString());
            Console.WriteLine(result.GetProperty("maxPlayers").ToString());
            Console.WriteLine(result.GetProperty("durationMinutes").ToString());
            Console.WriteLine(result.GetProperty("gameType").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("imageUrl").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("minPlayers").ToString());
            Console.WriteLine(result.GetProperty("maxPlayers").ToString());
            Console.WriteLine(result.GetProperty("durationMinutes").ToString());
            Console.WriteLine(result.GetProperty("gameType").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("imageUrl").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesPutById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
            });
            Response response = client.BoardGamesPutById(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesPutById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
            });
            Response response = await client.BoardGamesPutByIdAsync(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesPutById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
                description = "<description>",
                imageUrl = "<imageUrl>",
            });
            Response response = client.BoardGamesPutById(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesPutById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                name = "<name>",
                minPlayers = 1234,
                maxPlayers = 1234,
                durationMinutes = 1234,
                gameType = "<gameType>",
                description = "<description>",
                imageUrl = "<imageUrl>",
            });
            Response response = await client.BoardGamesPutByIdAsync(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesDeleteById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesDeleteById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesDeleteById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesDeleteByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesDeleteById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesDeleteById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesDeleteById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesDeleteByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesFilter_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesFilter(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesFilter_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesFilterAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesFilter_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesFilter(1234, 1234, "<gameType>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("minPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("maxPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("durationMinutes").ToString());
            Console.WriteLine(result[0].GetProperty("gameType").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("imageUrl").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesFilter_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesFilterAsync(1234, 1234, "<gameType>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("minPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("maxPlayers").ToString());
            Console.WriteLine(result[0].GetProperty("durationMinutes").ToString());
            Console.WriteLine(result[0].GetProperty("gameType").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("imageUrl").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetDistinctTypes_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGetDistinctTypes(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetDistinctTypes_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetDistinctTypesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetDistinctTypes_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.BoardGamesGetDistinctTypes(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetDistinctTypes_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.BoardGamesGetDistinctTypesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetRandom_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
1234
            });
            Response response = client.BoardGamesGetRandom(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetRandom_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
1234
            });
            Response response = await client.BoardGamesGetRandomAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_BoardGamesGetRandom_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
1234
            });
            Response response = client.BoardGamesGetRandom(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("minPlayers").ToString());
            Console.WriteLine(result.GetProperty("maxPlayers").ToString());
            Console.WriteLine(result.GetProperty("durationMinutes").ToString());
            Console.WriteLine(result.GetProperty("gameType").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("imageUrl").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_BoardGamesGetRandom_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
1234
            });
            Response response = await client.BoardGamesGetRandomAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("minPlayers").ToString());
            Console.WriteLine(result.GetProperty("maxPlayers").ToString());
            Console.WriteLine(result.GetProperty("durationMinutes").ToString());
            Console.WriteLine(result.GetProperty("gameType").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("imageUrl").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetHistory_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetHistory(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetHistory_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetHistoryAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetHistory_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetHistory(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameId").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameName").ToString());
            Console.WriteLine(result[0].GetProperty("playedAt").ToString());
            Console.WriteLine(result[0].GetProperty("playerCount").ToString());
            Console.WriteLine(result[0].GetProperty("notes").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetHistory_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetHistoryAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameId").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameName").ToString());
            Console.WriteLine(result[0].GetProperty("playedAt").ToString());
            Console.WriteLine(result[0].GetProperty("playerCount").ToString());
            Console.WriteLine(result[0].GetProperty("notes").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetByGameByBoardGameId_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetByGameByBoardGameId(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetByGameByBoardGameId_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetByGameByBoardGameIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetByGameByBoardGameId_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetByGameByBoardGameId(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameId").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameName").ToString());
            Console.WriteLine(result[0].GetProperty("playedAt").ToString());
            Console.WriteLine(result[0].GetProperty("playerCount").ToString());
            Console.WriteLine(result[0].GetProperty("notes").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetByGameByBoardGameId_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetByGameByBoardGameIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameId").ToString());
            Console.WriteLine(result[0].GetProperty("boardGameName").ToString());
            Console.WriteLine(result[0].GetProperty("playedAt").ToString());
            Console.WriteLine(result[0].GetProperty("playerCount").ToString());
            Console.WriteLine(result[0].GetProperty("notes").ToString());
            Console.WriteLine(result[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetGamePlayCounts_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetGamePlayCounts(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetGamePlayCounts_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetGamePlayCountsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetGamePlayCounts_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetGamePlayCounts(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetGamePlayCounts_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetGamePlayCountsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsPost_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
            });
            Response response = client.GameSessionsPost(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsPost_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
            });
            Response response = await client.GameSessionsPostAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsPost_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
                notes = "<notes>",
            });
            Response response = client.GameSessionsPost(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsPost_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
                notes = "<notes>",
            });
            Response response = await client.GameSessionsPostAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsGetById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsGetById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("boardGameId").ToString());
            Console.WriteLine(result.GetProperty("boardGameName").ToString());
            Console.WriteLine(result.GetProperty("playedAt").ToString());
            Console.WriteLine(result.GetProperty("playerCount").ToString());
            Console.WriteLine(result.GetProperty("notes").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsGetById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsGetByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("boardGameId").ToString());
            Console.WriteLine(result.GetProperty("boardGameName").ToString());
            Console.WriteLine(result.GetProperty("playedAt").ToString());
            Console.WriteLine(result.GetProperty("playerCount").ToString());
            Console.WriteLine(result.GetProperty("notes").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsPutById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
            });
            Response response = client.GameSessionsPutById(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsPutById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
            });
            Response response = await client.GameSessionsPutByIdAsync(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsPutById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
                notes = "<notes>",
            });
            Response response = client.GameSessionsPutById(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsPutById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
                boardGameId = 1234,
                playedAt = "2022-05-10T18:57:31.2311892Z",
                playerCount = 1234,
                notes = "<notes>",
            });
            Response response = await client.GameSessionsPutByIdAsync(1234, content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsDeleteById_ShortVersion()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsDeleteById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsDeleteById_ShortVersion_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsDeleteByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GameSessionsDeleteById_AllParameters()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = client.GameSessionsDeleteById(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GameSessionsDeleteById_AllParameters_Async()
        {
            GameOnTonightClient client = new GameOnTonightClient();

            Response response = await client.GameSessionsDeleteByIdAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("instance").ToString());
        }
    }
}
